var documenterSearchIndex = {"docs":
[{"location":"lib/functions/","page":"Functions","title":"Functions","text":"CurrentModule = Cleaner","category":"page"},{"location":"lib/functions/#Functions","page":"Functions","title":"Functions","text":"","category":"section"},{"location":"lib/functions/#Multi-threading-support","page":"Functions","title":"Multi-threading support","text":"","category":"section"},{"location":"lib/functions/","page":"Functions","title":"Functions","text":"The following functions will try to use multiple threads if possible when there are at least 2 columns and 1 million rows:","category":"page"},{"location":"lib/functions/","page":"Functions","title":"Functions","text":"CleanTable constructor when copycols=true\nAll compact functions\ndelete_const_columns and delete_const_columns!\nreinfer_schema and reinfer_schema!","category":"page"},{"location":"lib/functions/#Index","page":"Functions","title":"Index","text":"","category":"section"},{"location":"lib/functions/","page":"Functions","title":"Functions","text":"Pages = [\"functions.md\"]","category":"page"},{"location":"lib/functions/#Summarize-information","page":"Functions","title":"Summarize information","text":"","category":"section"},{"location":"lib/functions/","page":"Functions","title":"Functions","text":"size","category":"page"},{"location":"lib/functions/#Cleaner.size","page":"Functions","title":"Cleaner.size","text":"size(table::CleanTable)\n\nReturns a tuple containing the number of rows and columns of the given table.\n\n\n\n\n\n","category":"function"},{"location":"lib/functions/#Working-with-column-names","page":"Functions","title":"Working with column names","text":"","category":"section"},{"location":"lib/functions/","page":"Functions","title":"Functions","text":"generate_polished_names\npolish_names\npolish_names!\nrow_as_names\nrow_as_names!","category":"page"},{"location":"lib/functions/#Cleaner.generate_polished_names","page":"Functions","title":"Cleaner.generate_polished_names","text":"generate_polished_names(names; style::Symbol=:snake_case)\n\nReturn a vector of symbols containing new names that are unique and formated using the style selected.\n\n\n\n\n\n","category":"function"},{"location":"lib/functions/#Cleaner.polish_names","page":"Functions","title":"Cleaner.polish_names","text":"polish_names(table; style=:snake_case)\n\nCreate and return a CleanTable with copied columns having column names replaced to be unique and formated using the style selected.\n\nStyles\n\nsnake_case\ncamelCase\n\n\n\n\n\n","category":"function"},{"location":"lib/functions/#Cleaner.polish_names!","page":"Functions","title":"Cleaner.polish_names!","text":"polish_names!(table::CleanTable; style::Symbol=:snake_case)\n\nReturn a CleanTable where column names have been replaced to be unique and formated using the style selected.\n\nStyles\n\nsnake_case\ncamelCase\n\n\n\n\n\n","category":"function"},{"location":"lib/functions/#Cleaner.row_as_names","page":"Functions","title":"Cleaner.row_as_names","text":"row_as_names(table, i::Int; remove::Bool=false)\n\nCreates a CleanTable with copied columns and renames the table using row i as new names and removes in-place all the rows above row i if remove=true.\n\nDefault behavior is to remove rows above row i.\n\n\n\n\n\n","category":"function"},{"location":"lib/functions/#Cleaner.row_as_names!","page":"Functions","title":"Cleaner.row_as_names!","text":"row_as_names!(table::CleanTable, i::Int; remove::Bool=true)\n\nRenames the table using row i as new names and removes in-place all the rows above row i if remove=true.\n\nDefault behavior is to remove rows above row i.\n\n\n\n\n\n","category":"function"},{"location":"lib/functions/#Row/Column-removal","page":"Functions","title":"Row/Column removal","text":"","category":"section"},{"location":"lib/functions/","page":"Functions","title":"Functions","text":"compact_columns\ncompact_columns!\ncompact_rows\ncompact_rows!\ncompact_table\ncompact_table!\ndelete_const_columns\ndelete_const_columns!","category":"page"},{"location":"lib/functions/#Cleaner.compact_columns","page":"Functions","title":"Cleaner.compact_columns","text":"compact_columns(table; empty_values::Vector=[])\n\nCreates a CleanTable with copied columns and removes from it all columns filled entirely by missing and empty_values.\n\n\n\n\n\n","category":"function"},{"location":"lib/functions/#Cleaner.compact_columns!","page":"Functions","title":"Cleaner.compact_columns!","text":"compact_columns!(table::CleanTable; empty_values::Vector=[])\n\nRemoves in-place from a CleanTable all columns filled entirely by missing and empty_values.\n\n\n\n\n\n","category":"function"},{"location":"lib/functions/#Cleaner.compact_rows","page":"Functions","title":"Cleaner.compact_rows","text":"compact_rows(table; empty_values::Vector=[])\n\nCreates a CleanTable with copied columns and removes from it all rows filled entirely by missing and empty_values.\n\n\n\n\n\n","category":"function"},{"location":"lib/functions/#Cleaner.compact_rows!","page":"Functions","title":"Cleaner.compact_rows!","text":"compact_rows!(table::CleanTable; empty_values::Vector=[])\n\nRemoves in-place from a CleanTable all rows filled entirely by missing and empty_values.\n\n\n\n\n\n","category":"function"},{"location":"lib/functions/#Cleaner.compact_table","page":"Functions","title":"Cleaner.compact_table","text":"compact_table(table; empty_values::Vector=[])\n\nCreates a CleanTable with copied columns and removes from it all rows and columns filled entirely by missing and empty_values.\n\n\n\n\n\n","category":"function"},{"location":"lib/functions/#Cleaner.compact_table!","page":"Functions","title":"Cleaner.compact_table!","text":"compact_table!(table::CleanTable; empty_values::Vector=[])\n\nRemoves in-place from a CleanTable all rows and columns filled entirely by missing and  empty_values.\n\n\n\n\n\n","category":"function"},{"location":"lib/functions/#Cleaner.delete_const_columns","page":"Functions","title":"Cleaner.delete_const_columns","text":"delete_const_columns(table)\n\nCreates a CleanTable with copied columns and removes each column filled with just a constant value.\n\n\n\n\n\n","category":"function"},{"location":"lib/functions/#Cleaner.delete_const_columns!","page":"Functions","title":"Cleaner.delete_const_columns!","text":"delete_const_columns!(table::CleanTable)\n\nRemoves in-place from a CleanTable each column filled with just a constant value.\n\n\n\n\n\n","category":"function"},{"location":"lib/functions/#Modifiying-table-schema","page":"Functions","title":"Modifiying table schema","text":"","category":"section"},{"location":"lib/functions/","page":"Functions","title":"Functions","text":"reinfer_schema\nreinfer_schema!","category":"page"},{"location":"lib/functions/#Cleaner.reinfer_schema","page":"Functions","title":"Cleaner.reinfer_schema","text":"reinfer_schema(table; max_types::Int=3)\n\nCreates a CleanTable with copied columns and tries to minimize the amount of element types for each column without making the column type Any.\n\nFor this, will try to make the column of type Union with up to maxtypes and internally use ```Base.promotetypejoin``` on all numeric types. If not possible, leaves the column as-is.\n\n\n\n\n\n","category":"function"},{"location":"lib/functions/#Cleaner.reinfer_schema!","page":"Functions","title":"Cleaner.reinfer_schema!","text":"reinfer_schema!(table::CleanTable; max_types::Int=3)\n\nTries to minimize the amount of element types for each column without making the column type Any.\n\nFor this, will try to make the column of type Union with up to maxtypes and internally use ```Base.promotetypejoin``` on all numeric types. If not possible, leaves the column as-is.\n\n\n\n\n\n","category":"function"},{"location":"man/first_steps/#First-steps","page":"First steps","title":"First steps","text":"","category":"section"},{"location":"man/first_steps/#Installation","page":"First steps","title":"Installation","text":"","category":"section"},{"location":"man/first_steps/","page":"First steps","title":"First steps","text":"Installing the latest stable version of Cleaner is as simple as using","category":"page"},{"location":"man/first_steps/","page":"First steps","title":"First steps","text":"import Pkg\nPkg.add(\"Cleaner\")","category":"page"},{"location":"man/first_steps/","page":"First steps","title":"First steps","text":"After installation has finished, you just need to call using Cleaner to get all Cleaner functionalities in your current namespace","category":"page"},{"location":"man/first_steps/#About-the-CleanTable-type","page":"First steps","title":"About the CleanTable type","text":"","category":"section"},{"location":"man/first_steps/","page":"First steps","title":"First steps","text":"A CleanTable is meant to represent data in a tabular format, being column based by design, while also being the type where all Cleaner functions do their work.","category":"page"},{"location":"man/first_steps/","page":"First steps","title":"First steps","text":"It implements the Tables.jl interface and the constructor can create a CleanTable from any Tables.jl implementation.","category":"page"},{"location":"man/first_steps/","page":"First steps","title":"First steps","text":"julia> using DataFrames\n\njulia> df = DataFrame(A = Any[1, 2, 3, 4], B = Any[\"M\", \"F\", \"F\", \"M\"])\n4×2 DataFrame\n Row │ A    B\n     │ Any  Any\n─────┼──────────\n   1 │ 1    M\n   2 │ 2    F\n   3 │ 3    F\n   4 │ 4    M\n\njulia> using Cleaner\n\njulia> ct = CleanTable(df)\n┌─────┬─────┐\n│   A │   B │\n│ Any │ Any │\n├─────┼─────┤\n│   1 │   M │\n│   2 │   F │\n│   3 │   F │\n│   4 │   M │\n└─────┴─────┘\n\n","category":"page"},{"location":"man/first_steps/","page":"First steps","title":"First steps","text":"If the original Tables.jl implementation (source) you were using supports constructing the source type from any Tables.jl implementation,  getting back to using an object of your source type is as easy as calling its constructor after you have finished working with Cleaner.","category":"page"},{"location":"man/first_steps/","page":"First steps","title":"First steps","text":"julia> reinfer_schema!(ct)\n┌───────┬────────┐\n│     A │      B │\n│ Int64 │ String │\n├───────┼────────┤\n│     1 │      M │\n│     2 │      F │\n│     3 │      F │\n│     4 │      M │\n└───────┴────────┘\n\n\njulia> DataFrame(ct)\n4×2 DataFrame\n Row │ A      B\n     │ Int64  String\n─────┼───────────────\n   1 │     1  M\n   2 │     2  F\n   3 │     3  F\n   4 │     4  M\n","category":"page"},{"location":"lib/types/","page":"Types","title":"Types","text":"CurrentModule = Cleaner","category":"page"},{"location":"lib/types/#Types","page":"Types","title":"Types","text":"","category":"section"},{"location":"lib/types/#CleanTable-type-design","page":"Types","title":"CleanTable type design","text":"","category":"section"},{"location":"lib/types/","page":"Types","title":"Types","text":"CleanTable is the type where all Cleaner.jl functions operate. For example, when you call polish_names(table) internally a CleanTable (ct) with copied columns based in the table passed is being created and polish_names!(ct) is called to return the desired result.","category":"page"},{"location":"lib/types/","page":"Types","title":"Types","text":"By default the constructor that builds a CleanTable from a table copies the columns but this behavior can be bypassed by passing the argument copycols=false e.g. CleanTable(table; copycols=false).","category":"page"},{"location":"lib/types/","page":"Types","title":"Types","text":"It is only possible to change column names from a CleanTable directly, adding/removing rows or columns without using Cleaner.jl functions is not supported and heavily discouraged. Please use other packages that support the Tables.jl interface such as DataFrames.jl for those needs.","category":"page"},{"location":"lib/types/#Type-specification","page":"Types","title":"Type specification","text":"","category":"section"},{"location":"lib/types/","page":"Types","title":"Types","text":"CleanTable","category":"page"},{"location":"lib/types/#Cleaner.CleanTable","page":"Types","title":"Cleaner.CleanTable","text":"CleanTable <: Tables.AbstractColumns\n\nA Tables.jl implementation that stores column names and columns for Cleaner.jl internal use.\n\nThe default behavior of this type is to try to copy the columns of the original Tables implementation a.k.a: the source, but the user can call the second constructor specifiying copycols=false to override this behavior and try to use the original columns directly, but if the source column type is not mutable, it will end up in errors.\n\nConstructors\n\nCleanTable(names::Vector{Symbol}, cols; copycols::Bool=false)\nCleanTable(table; copycols::Bool=true)\nCleanTable(table::CleanTable; copycols::Bool=true)\n\n\n\n\n\n","category":"type"},{"location":"","page":"Home","title":"Home","text":"CurrentModule = Cleaner","category":"page"},{"location":"#Cleaner","page":"Home","title":"Cleaner","text":"","category":"section"},{"location":"#A-toolbox-of-simple-solutions-for-common-data-cleaning-problems.","page":"Home","title":"A toolbox of simple solutions for common data cleaning problems.","text":"","category":"section"},{"location":"#Key-Features","page":"Home","title":"Key Features","text":"","category":"section"},{"location":"#With-Cleaner.jl-you-will-be-able-to:","page":"Home","title":"With Cleaner.jl you will be able to:","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Format column names to make them unique and fit snake_case or camelCase style.\nRemove rows and columns with different kinds of empty values. e.g: ```","category":"page"},{"location":"","page":"Home","title":"Home","text":"missing, \"\", \"NA\", \"None\"```","category":"page"},{"location":"","page":"Home","title":"Home","text":"Delete columns filled with just a constant value.\nUse a row as the names of the columns.\nMinimize the amount of element types for each column without making the column of type Any.\nAutomatically use multiple threads if your data is big enough (and you are running Julia with more than 1 thread).\nRematerialize your original source Tables.jl type, as CleanTable implements the Tables.jl interface too.","category":"page"},{"location":"#Acknowledgement","page":"Home","title":"Acknowledgement","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Inspired by janitor from the R ecosystem.","category":"page"}]
}
