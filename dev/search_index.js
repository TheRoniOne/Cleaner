var documenterSearchIndex = {"docs":
[{"location":"","page":"Home","title":"Home","text":"CurrentModule = Cleaner","category":"page"},{"location":"#Cleaner","page":"Home","title":"Cleaner","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Simple tools for common data cleaning problems.","category":"page"},{"location":"","page":"Home","title":"Home","text":"","category":"page"},{"location":"","page":"Home","title":"Home","text":"Modules = [Cleaner]","category":"page"},{"location":"#Cleaner.CleanTable","page":"Home","title":"Cleaner.CleanTable","text":"CleanTable <: Tables.AbstractColumns\n\nA Tables.jl implementation that stores column names and columns for Cleaner.jl internal use.\n\nThe default behavior of this type is to try to copy the columns of the original Tables  implementation a.k.a: the source, but the user can call the second constructor specifiying  copycols=false to override this behavior and try to use the original columns directly.\n\nIf the source column type is not mutable, this will end up in errors.\n\nConstructors\n\nCleanTable(names::Vector{Symbol}, cols; copycols::Bool=true)\nCleanTable(table; copycols::Bool=true)\n\n\n\n\n\n","category":"type"},{"location":"#Cleaner.generate_polished_names-Tuple{Any}","page":"Home","title":"Cleaner.generate_polished_names","text":"generate_polished_names(names; style=\"snake_case\")\n\nReturn a vector of symbols containing new names that are unique and formated using the style selected.\n\n\n\n\n\n","category":"method"},{"location":"#Cleaner.polish_names!-Tuple{Any, Any}","page":"Home","title":"Cleaner.polish_names!","text":"polish_names!(table, f_rename!; style=\"snake_case\")\n\nReturn a table where column names have been replaced to be unique and formated using the style selected. \n\nStyles\n\nsnake_case\ncamelCase\n\nThe table argument must be any Tables.jl compatible interface and f_rename! must be a function that  can change inplace the column names of the passed table.\n\n\n\n\n\n","category":"method"}]
}
